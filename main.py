import telebot
from rembg import remove
from PIL import Image
import io
import sqlite3
import logging
import time
import csv

BOT_TOKEN = 'token'
ADMIN_ID = 'admin_id'

bot = telebot.TeleBot(BOT_TOKEN)

logging.basicConfig(level=logging.INFO)

conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    usage_count INTEGER DEFAULT 0
)
''')
conn.commit()


def update_user_data(user):
    cursor.execute('''
    INSERT INTO users (user_id, username, first_name, last_name, usage_count)
    VALUES (?, ?, ?, ?, 1)
    ON CONFLICT(user_id) DO UPDATE SET
        usage_count = usage_count + 1
    ''', (user.id, user.username, user.first_name, user.last_name))
    conn.commit()


def generate_csv():
    cursor.execute('SELECT * FROM users')
    users = cursor.fetchall()
    with open('user_stats.csv', 'w', newline='') as csvfile:
        fieldnames = ['user_id', 'username', 'first_name', 'last_name', 'usage_count']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        writer.writeheader()
        for user in users:
            writer.writerow({
                'user_id': user[0],
                'username': user[1],
                'first_name': user[2],
                'last_name': user[3],
                'usage_count': user[4]
            })


@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_message = (
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π! üéâ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è —É–¥–∞–ª—é —Ñ–æ–Ω. –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, "
        "–ø–æ—ç—Ç–æ–º—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n\n"
    )
    bot.reply_to(message, welcome_message)
    update_user_data(message.from_user)


@bot.message_handler(commands=['stats'])
def send_stats(message):
    if str(message.from_user.id) == ADMIN_ID:
        generate_csv()
        with open('user_stats.csv', 'rb') as csvfile:
            bot.send_document(message.chat.id, csvfile)
    else:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        bot.reply_to(message, "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è —É–¥–∞–ª—è—é —Ñ–æ–Ω —Å –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        img = Image.open(io.BytesIO(downloaded_file))

        img_no_bg = remove(img)

        img_byte_arr = io.BytesIO()
        img_no_bg.save(img_byte_arr, format='PNG')
        img_byte_arr = img_byte_arr.getvalue()

        bot.send_document(message.chat.id, io.BytesIO(img_byte_arr),
                          caption="‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤–∞—à–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.",
                          visible_file_name="image_no_bg.png")

        update_user_data(message.from_user)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"–û—Å–Ω–æ–≤–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        time.sleep(5)
